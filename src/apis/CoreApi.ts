/* tslint:disable */
/* eslint-disable */
/**
 * lnbits client
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConversionData,
  CreateExtension,
  CreateInvoiceData,
  CreateLNURLData,
  CreateLnurlAuth,
  CreateTopup,
  DecodePayment,
  EditableSettings,
  HTTPValidationError,
  Page,
  Payment,
} from '../models';
import {
    ConversionDataFromJSON,
    ConversionDataToJSON,
    CreateExtensionFromJSON,
    CreateExtensionToJSON,
    CreateInvoiceDataFromJSON,
    CreateInvoiceDataToJSON,
    CreateLNURLDataFromJSON,
    CreateLNURLDataToJSON,
    CreateLnurlAuthFromJSON,
    CreateLnurlAuthToJSON,
    CreateTopupFromJSON,
    CreateTopupToJSON,
    DecodePaymentFromJSON,
    DecodePaymentToJSON,
    EditableSettingsFromJSON,
    EditableSettingsToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PageFromJSON,
    PageToJSON,
    PaymentFromJSON,
    PaymentToJSON,
} from '../models';

export interface ApiDeleteSettingsAdminApiV1SettingsDeleteRequest {
    usr: string;
}

export interface ApiDownloadBackupAdminApiV1BackupGetRequest {
    usr: string;
}

export interface ApiFiatAsSatsApiV1ConversionPostRequest {
    conversionData: ConversionData;
}

export interface ApiGetSettingsAdminApiV1SettingsGetRequest {
    usr: string;
}

export interface ApiInstallExtensionApiV1ExtensionPostRequest {
    usr: string;
    createExtension: CreateExtension;
}

export interface ApiLnurlscanApiV1LnurlscanCodeGetRequest {
    code: string;
}

export interface ApiPaymentApiV1PaymentsPaymentHashGetRequest {
    paymentHash: any;
    xApiKey?: string;
}

export interface ApiPaymentsCreateApiV1PaymentsPostRequest {
    createInvoiceData: CreateInvoiceData;
}

export interface ApiPaymentsDecodeApiV1PaymentsDecodePostRequest {
    decodePayment: DecodePayment;
}

export interface ApiPaymentsPayLnurlApiV1PaymentsLnurlPostRequest {
    createLNURLData: CreateLNURLData;
}

export interface ApiPerformLnurlauthApiV1LnurlauthPostRequest {
    createLnurlAuth: CreateLnurlAuth;
}

export interface ApiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRequest {
    paymentHash: any;
}

export interface ApiRestartServerAdminApiV1RestartGetRequest {
    usr: string;
}

export interface ApiUninstallExtensionApiV1ExtensionExtIdDeleteRequest {
    extId: string;
    usr: string;
}

export interface ApiUpdateSettingsAdminApiV1SettingsPutRequest {
    usr: string;
    editableSettings: EditableSettings;
}

export interface ApiUpdateWalletApiV1WalletNewNamePutRequest {
    newName: string;
}

export interface AuditAdminApiV1AuditGetRequest {
    usr: string;
}

export interface DeleteExtensionDbApiV1ExtensionExtIdDbDeleteRequest {
    extId: string;
    usr: string;
}

export interface GetExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRequest {
    org: string;
    repo: string;
    tagName: string;
    usr: string;
}

export interface GetExtensionReleasesApiV1ExtensionExtIdReleasesGetRequest {
    extId: string;
    usr: string;
}

export interface ImgApiV1QrcodeDataGetRequest {
    data: any;
}

export interface PaymentListApiV1PaymentsGetRequest {
    limit?: number;
    offset?: number;
    sortby?: string;
    direction?: PaymentListApiV1PaymentsGetDirectionEnum;
    search?: string;
    checkingId?: string;
    amount?: number;
    fee?: number;
    memo?: string;
    time?: Date;
    bolt11?: string;
    preimage?: string;
    paymentHash?: string;
    expiry?: Date;
    extra?: object;
    walletId?: string;
    webhook?: string;
    webhookStatus?: number;
}

export interface PaymentListApiV1PaymentsPaginatedGetRequest {
    limit?: number;
    offset?: number;
    sortby?: string;
    direction?: PaymentListApiV1PaymentsPaginatedGetDirectionEnum;
    search?: string;
    checkingId?: string;
    amount?: number;
    fee?: number;
    memo?: string;
    time?: Date;
    bolt11?: string;
    preimage?: string;
    paymentHash?: string;
    expiry?: Date;
    extra?: object;
    walletId?: string;
    webhook?: string;
    webhookStatus?: number;
}

export interface TinyurlApiV1TinyurlPostRequest {
    url: string;
    endless?: boolean;
}

export interface TinyurlApiV1TinyurlTinyurlIdDeleteRequest {
    tinyurlId: string;
}

export interface TinyurlApiV1TinyurlTinyurlIdGetRequest {
    tinyurlId: string;
}

export interface TinyurlTTinyurlIdGetRequest {
    tinyurlId: string;
}

export interface TopupAdminApiV1TopupPutRequest {
    usr: string;
    createTopup: CreateTopup;
}

export interface WebsocketUpdateGetApiV1WsItemIdDataGetRequest {
    itemId: string;
    data: string;
}

export interface WebsocketUpdatePostApiV1WsItemIdPostRequest {
    itemId: string;
    data: string;
}

/**
 * CoreApi - interface
 * 
 * @export
 * @interface CoreApiInterface
 */
export interface CoreApiInterface {
    /**
     * 
     * @summary Api Delete Settings
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiDeleteSettingsAdminApiV1SettingsDeleteRaw(requestParameters: ApiDeleteSettingsAdminApiV1SettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Delete Settings
     */
    apiDeleteSettingsAdminApiV1SettingsDelete(requestParameters: ApiDeleteSettingsAdminApiV1SettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Download Backup
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiDownloadBackupAdminApiV1BackupGetRaw(requestParameters: ApiDownloadBackupAdminApiV1BackupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Api Download Backup
     */
    apiDownloadBackupAdminApiV1BackupGet(requestParameters: ApiDownloadBackupAdminApiV1BackupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Api Fiat As Sats
     * @param {ConversionData} conversionData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiFiatAsSatsApiV1ConversionPostRaw(requestParameters: ApiFiatAsSatsApiV1ConversionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Fiat As Sats
     */
    apiFiatAsSatsApiV1ConversionPost(requestParameters: ApiFiatAsSatsApiV1ConversionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Get Settings
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiGetSettingsAdminApiV1SettingsGetRaw(requestParameters: ApiGetSettingsAdminApiV1SettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Get Settings
     */
    apiGetSettingsAdminApiV1SettingsGet(requestParameters: ApiGetSettingsAdminApiV1SettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Install Extension
     * @param {string} usr 
     * @param {CreateExtension} createExtension 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiInstallExtensionApiV1ExtensionPostRaw(requestParameters: ApiInstallExtensionApiV1ExtensionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Install Extension
     */
    apiInstallExtensionApiV1ExtensionPost(requestParameters: ApiInstallExtensionApiV1ExtensionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api List Currencies Available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiListCurrenciesAvailableApiV1CurrenciesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api List Currencies Available
     */
    apiListCurrenciesAvailableApiV1CurrenciesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Lnurlscan
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiLnurlscanApiV1LnurlscanCodeGetRaw(requestParameters: ApiLnurlscanApiV1LnurlscanCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Lnurlscan
     */
    apiLnurlscanApiV1LnurlscanCodeGet(requestParameters: ApiLnurlscanApiV1LnurlscanCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Payment
     * @param {any} paymentHash 
     * @param {string} [xApiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPaymentApiV1PaymentsPaymentHashGetRaw(requestParameters: ApiPaymentApiV1PaymentsPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Payment
     */
    apiPaymentApiV1PaymentsPaymentHashGet(requestParameters: ApiPaymentApiV1PaymentsPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Payments Create
     * @param {CreateInvoiceData} createInvoiceData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPaymentsCreateApiV1PaymentsPostRaw(requestParameters: ApiPaymentsCreateApiV1PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Payments Create
     */
    apiPaymentsCreateApiV1PaymentsPost(requestParameters: ApiPaymentsCreateApiV1PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Payments Decode
     * @param {DecodePayment} decodePayment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPaymentsDecodeApiV1PaymentsDecodePostRaw(requestParameters: ApiPaymentsDecodeApiV1PaymentsDecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Payments Decode
     */
    apiPaymentsDecodeApiV1PaymentsDecodePost(requestParameters: ApiPaymentsDecodeApiV1PaymentsDecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Payments Pay Lnurl
     * @param {CreateLNURLData} createLNURLData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPaymentsPayLnurlApiV1PaymentsLnurlPostRaw(requestParameters: ApiPaymentsPayLnurlApiV1PaymentsLnurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Payments Pay Lnurl
     */
    apiPaymentsPayLnurlApiV1PaymentsLnurlPost(requestParameters: ApiPaymentsPayLnurlApiV1PaymentsLnurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Payments Sse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPaymentsSseApiV1PaymentsSseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Payments Sse
     */
    apiPaymentsSseApiV1PaymentsSseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Perform Lnurlauth
     * @param {CreateLnurlAuth} createLnurlAuth 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPerformLnurlauthApiV1LnurlauthPostRaw(requestParameters: ApiPerformLnurlauthApiV1LnurlauthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Perform Lnurlauth
     */
    apiPerformLnurlauthApiV1LnurlauthPost(requestParameters: ApiPerformLnurlauthApiV1LnurlauthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Public Payment Longpolling
     * @param {any} paymentHash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRaw(requestParameters: ApiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Public Payment Longpolling
     */
    apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(requestParameters: ApiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Restart Server
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiRestartServerAdminApiV1RestartGetRaw(requestParameters: ApiRestartServerAdminApiV1RestartGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Restart Server
     */
    apiRestartServerAdminApiV1RestartGet(requestParameters: ApiRestartServerAdminApiV1RestartGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Uninstall Extension
     * @param {string} extId 
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiUninstallExtensionApiV1ExtensionExtIdDeleteRaw(requestParameters: ApiUninstallExtensionApiV1ExtensionExtIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Uninstall Extension
     */
    apiUninstallExtensionApiV1ExtensionExtIdDelete(requestParameters: ApiUninstallExtensionApiV1ExtensionExtIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Update Settings
     * @param {string} usr 
     * @param {EditableSettings} editableSettings 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiUpdateSettingsAdminApiV1SettingsPutRaw(requestParameters: ApiUpdateSettingsAdminApiV1SettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Update Settings
     */
    apiUpdateSettingsAdminApiV1SettingsPut(requestParameters: ApiUpdateSettingsAdminApiV1SettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Update Wallet
     * @param {string} newName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiUpdateWalletApiV1WalletNewNamePutRaw(requestParameters: ApiUpdateWalletApiV1WalletNewNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Update Wallet
     */
    apiUpdateWalletApiV1WalletNewNamePut(requestParameters: ApiUpdateWalletApiV1WalletNewNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Api Wallet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    apiWalletApiV1WalletGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Api Wallet
     */
    apiWalletApiV1WalletGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * show the current balance of the node and the LNbits database
     * @summary Audit
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    auditAdminApiV1AuditGetRaw(requestParameters: AuditAdminApiV1AuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * show the current balance of the node and the LNbits database
     * Audit
     */
    auditAdminApiV1AuditGet(requestParameters: AuditAdminApiV1AuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Delete Extension Db
     * @param {string} extId 
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    deleteExtensionDbApiV1ExtensionExtIdDbDeleteRaw(requestParameters: DeleteExtensionDbApiV1ExtensionExtIdDbDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Extension Db
     */
    deleteExtensionDbApiV1ExtensionExtIdDbDelete(requestParameters: DeleteExtensionDbApiV1ExtensionExtIdDbDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Get Extension Release
     * @param {string} org 
     * @param {string} repo 
     * @param {string} tagName 
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRaw(requestParameters: GetExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Extension Release
     */
    getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(requestParameters: GetExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Get Extension Releases
     * @param {string} extId 
     * @param {string} usr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    getExtensionReleasesApiV1ExtensionExtIdReleasesGetRaw(requestParameters: GetExtensionReleasesApiV1ExtensionExtIdReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Extension Releases
     */
    getExtensionReleasesApiV1ExtensionExtIdReleasesGet(requestParameters: GetExtensionReleasesApiV1ExtensionExtIdReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    healthApiV1HealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Health
     */
    healthApiV1HealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Img
     * @param {any} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    imgApiV1QrcodeDataGetRaw(requestParameters: ImgApiV1QrcodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Img
     */
    imgApiV1QrcodeDataGet(requestParameters: ImgApiV1QrcodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary get list of payments
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortby] 
     * @param {'asc' | 'desc'} [direction] 
     * @param {string} [search] Text based search
     * @param {string} [checkingId] Supports Filtering
     * @param {number} [amount] Supports Filtering. Supports Search
     * @param {number} [fee] Supports Filtering
     * @param {string} [memo] Supports Filtering. Supports Search
     * @param {Date} [time] Supports Filtering
     * @param {string} [bolt11] Supports Filtering
     * @param {string} [preimage] Supports Filtering
     * @param {string} [paymentHash] Supports Filtering
     * @param {Date} [expiry] Supports Filtering
     * @param {object} [extra] Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60;
     * @param {string} [walletId] Supports Filtering
     * @param {string} [webhook] Supports Filtering
     * @param {number} [webhookStatus] Supports Filtering
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    paymentListApiV1PaymentsGetRaw(requestParameters: PaymentListApiV1PaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>>;

    /**
     * get list of payments
     */
    paymentListApiV1PaymentsGet(requestParameters: PaymentListApiV1PaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>>;

    /**
     * 
     * @summary get paginated list of payments
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortby] 
     * @param {'asc' | 'desc'} [direction] 
     * @param {string} [search] Text based search
     * @param {string} [checkingId] Supports Filtering
     * @param {number} [amount] Supports Filtering. Supports Search
     * @param {number} [fee] Supports Filtering
     * @param {string} [memo] Supports Filtering. Supports Search
     * @param {Date} [time] Supports Filtering
     * @param {string} [bolt11] Supports Filtering
     * @param {string} [preimage] Supports Filtering
     * @param {string} [paymentHash] Supports Filtering
     * @param {Date} [expiry] Supports Filtering
     * @param {object} [extra] Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60;
     * @param {string} [walletId] Supports Filtering
     * @param {string} [webhook] Supports Filtering
     * @param {number} [webhookStatus] Supports Filtering
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    paymentListApiV1PaymentsPaginatedGetRaw(requestParameters: PaymentListApiV1PaymentsPaginatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * get paginated list of payments
     */
    paymentListApiV1PaymentsPaginatedGet(requestParameters: PaymentListApiV1PaymentsPaginatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * creates a tinyurl
     * @summary Tinyurl
     * @param {string} url 
     * @param {boolean} [endless] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    tinyurlApiV1TinyurlPostRaw(requestParameters: TinyurlApiV1TinyurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * creates a tinyurl
     * Tinyurl
     */
    tinyurlApiV1TinyurlPost(requestParameters: TinyurlApiV1TinyurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * delete a tinyurl by id
     * @summary Tinyurl
     * @param {string} tinyurlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    tinyurlApiV1TinyurlTinyurlIdDeleteRaw(requestParameters: TinyurlApiV1TinyurlTinyurlIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * delete a tinyurl by id
     * Tinyurl
     */
    tinyurlApiV1TinyurlTinyurlIdDelete(requestParameters: TinyurlApiV1TinyurlTinyurlIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * get a tinyurl by id
     * @summary Tinyurl
     * @param {string} tinyurlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    tinyurlApiV1TinyurlTinyurlIdGetRaw(requestParameters: TinyurlApiV1TinyurlTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * get a tinyurl by id
     * Tinyurl
     */
    tinyurlApiV1TinyurlTinyurlIdGet(requestParameters: TinyurlApiV1TinyurlTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * redirects a tinyurl by id
     * @summary Tinyurl
     * @param {string} tinyurlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    tinyurlTTinyurlIdGetRaw(requestParameters: TinyurlTTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * redirects a tinyurl by id
     * Tinyurl
     */
    tinyurlTTinyurlIdGet(requestParameters: TinyurlTTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Topup
     * @param {string} usr 
     * @param {CreateTopup} createTopup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    topupAdminApiV1TopupPutRaw(requestParameters: TopupAdminApiV1TopupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Topup
     */
    topupAdminApiV1TopupPut(requestParameters: TopupAdminApiV1TopupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Websocket Update Get
     * @param {string} itemId 
     * @param {string} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    websocketUpdateGetApiV1WsItemIdDataGetRaw(requestParameters: WebsocketUpdateGetApiV1WsItemIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Websocket Update Get
     */
    websocketUpdateGetApiV1WsItemIdDataGet(requestParameters: WebsocketUpdateGetApiV1WsItemIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Websocket Update Post
     * @param {string} itemId 
     * @param {string} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    websocketUpdatePostApiV1WsItemIdPostRaw(requestParameters: WebsocketUpdatePostApiV1WsItemIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Websocket Update Post
     */
    websocketUpdatePostApiV1WsItemIdPost(requestParameters: WebsocketUpdatePostApiV1WsItemIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI implements CoreApiInterface {

    /**
     * Api Delete Settings
     */
    async apiDeleteSettingsAdminApiV1SettingsDeleteRaw(requestParameters: ApiDeleteSettingsAdminApiV1SettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiDeleteSettingsAdminApiV1SettingsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/settings/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Delete Settings
     */
    async apiDeleteSettingsAdminApiV1SettingsDelete(requestParameters: ApiDeleteSettingsAdminApiV1SettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiDeleteSettingsAdminApiV1SettingsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Download Backup
     */
    async apiDownloadBackupAdminApiV1BackupGetRaw(requestParameters: ApiDownloadBackupAdminApiV1BackupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiDownloadBackupAdminApiV1BackupGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/backup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Api Download Backup
     */
    async apiDownloadBackupAdminApiV1BackupGet(requestParameters: ApiDownloadBackupAdminApiV1BackupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDownloadBackupAdminApiV1BackupGetRaw(requestParameters, initOverrides);
    }

    /**
     * Api Fiat As Sats
     */
    async apiFiatAsSatsApiV1ConversionPostRaw(requestParameters: ApiFiatAsSatsApiV1ConversionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.conversionData === null || requestParameters.conversionData === undefined) {
            throw new runtime.RequiredError('conversionData','Required parameter requestParameters.conversionData was null or undefined when calling apiFiatAsSatsApiV1ConversionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/conversion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversionDataToJSON(requestParameters.conversionData),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Fiat As Sats
     */
    async apiFiatAsSatsApiV1ConversionPost(requestParameters: ApiFiatAsSatsApiV1ConversionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiFiatAsSatsApiV1ConversionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Get Settings
     */
    async apiGetSettingsAdminApiV1SettingsGetRaw(requestParameters: ApiGetSettingsAdminApiV1SettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiGetSettingsAdminApiV1SettingsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Get Settings
     */
    async apiGetSettingsAdminApiV1SettingsGet(requestParameters: ApiGetSettingsAdminApiV1SettingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiGetSettingsAdminApiV1SettingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Install Extension
     */
    async apiInstallExtensionApiV1ExtensionPostRaw(requestParameters: ApiInstallExtensionApiV1ExtensionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiInstallExtensionApiV1ExtensionPost.');
        }

        if (requestParameters.createExtension === null || requestParameters.createExtension === undefined) {
            throw new runtime.RequiredError('createExtension','Required parameter requestParameters.createExtension was null or undefined when calling apiInstallExtensionApiV1ExtensionPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/extension`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExtensionToJSON(requestParameters.createExtension),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Install Extension
     */
    async apiInstallExtensionApiV1ExtensionPost(requestParameters: ApiInstallExtensionApiV1ExtensionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiInstallExtensionApiV1ExtensionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api List Currencies Available
     */
    async apiListCurrenciesAvailableApiV1CurrenciesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api List Currencies Available
     */
    async apiListCurrenciesAvailableApiV1CurrenciesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiListCurrenciesAvailableApiV1CurrenciesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Api Lnurlscan
     */
    async apiLnurlscanApiV1LnurlscanCodeGetRaw(requestParameters: ApiLnurlscanApiV1LnurlscanCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling apiLnurlscanApiV1LnurlscanCodeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/lnurlscan/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Lnurlscan
     */
    async apiLnurlscanApiV1LnurlscanCodeGet(requestParameters: ApiLnurlscanApiV1LnurlscanCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiLnurlscanApiV1LnurlscanCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Payment
     */
    async apiPaymentApiV1PaymentsPaymentHashGetRaw(requestParameters: ApiPaymentApiV1PaymentsPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.paymentHash === null || requestParameters.paymentHash === undefined) {
            throw new runtime.RequiredError('paymentHash','Required parameter requestParameters.paymentHash was null or undefined when calling apiPaymentApiV1PaymentsPaymentHashGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['X-Api-Key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/v1/payments/{payment_hash}`.replace(`{${"payment_hash"}}`, encodeURIComponent(String(requestParameters.paymentHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Payment
     */
    async apiPaymentApiV1PaymentsPaymentHashGet(requestParameters: ApiPaymentApiV1PaymentsPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPaymentApiV1PaymentsPaymentHashGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Payments Create
     */
    async apiPaymentsCreateApiV1PaymentsPostRaw(requestParameters: ApiPaymentsCreateApiV1PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.createInvoiceData === null || requestParameters.createInvoiceData === undefined) {
            throw new runtime.RequiredError('createInvoiceData','Required parameter requestParameters.createInvoiceData was null or undefined when calling apiPaymentsCreateApiV1PaymentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoiceDataToJSON(requestParameters.createInvoiceData),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Payments Create
     */
    async apiPaymentsCreateApiV1PaymentsPost(requestParameters: ApiPaymentsCreateApiV1PaymentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPaymentsCreateApiV1PaymentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Payments Decode
     */
    async apiPaymentsDecodeApiV1PaymentsDecodePostRaw(requestParameters: ApiPaymentsDecodeApiV1PaymentsDecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.decodePayment === null || requestParameters.decodePayment === undefined) {
            throw new runtime.RequiredError('decodePayment','Required parameter requestParameters.decodePayment was null or undefined when calling apiPaymentsDecodeApiV1PaymentsDecodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/payments/decode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DecodePaymentToJSON(requestParameters.decodePayment),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Payments Decode
     */
    async apiPaymentsDecodeApiV1PaymentsDecodePost(requestParameters: ApiPaymentsDecodeApiV1PaymentsDecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPaymentsDecodeApiV1PaymentsDecodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Payments Pay Lnurl
     */
    async apiPaymentsPayLnurlApiV1PaymentsLnurlPostRaw(requestParameters: ApiPaymentsPayLnurlApiV1PaymentsLnurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.createLNURLData === null || requestParameters.createLNURLData === undefined) {
            throw new runtime.RequiredError('createLNURLData','Required parameter requestParameters.createLNURLData was null or undefined when calling apiPaymentsPayLnurlApiV1PaymentsLnurlPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/payments/lnurl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLNURLDataToJSON(requestParameters.createLNURLData),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Payments Pay Lnurl
     */
    async apiPaymentsPayLnurlApiV1PaymentsLnurlPost(requestParameters: ApiPaymentsPayLnurlApiV1PaymentsLnurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPaymentsPayLnurlApiV1PaymentsLnurlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Payments Sse
     */
    async apiPaymentsSseApiV1PaymentsSseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/payments/sse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Payments Sse
     */
    async apiPaymentsSseApiV1PaymentsSseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPaymentsSseApiV1PaymentsSseGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Api Perform Lnurlauth
     */
    async apiPerformLnurlauthApiV1LnurlauthPostRaw(requestParameters: ApiPerformLnurlauthApiV1LnurlauthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.createLnurlAuth === null || requestParameters.createLnurlAuth === undefined) {
            throw new runtime.RequiredError('createLnurlAuth','Required parameter requestParameters.createLnurlAuth was null or undefined when calling apiPerformLnurlauthApiV1LnurlauthPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/lnurlauth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLnurlAuthToJSON(requestParameters.createLnurlAuth),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Perform Lnurlauth
     */
    async apiPerformLnurlauthApiV1LnurlauthPost(requestParameters: ApiPerformLnurlauthApiV1LnurlauthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPerformLnurlauthApiV1LnurlauthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Public Payment Longpolling
     */
    async apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRaw(requestParameters: ApiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.paymentHash === null || requestParameters.paymentHash === undefined) {
            throw new runtime.RequiredError('paymentHash','Required parameter requestParameters.paymentHash was null or undefined when calling apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/v1/payment/{payment_hash}`.replace(`{${"payment_hash"}}`, encodeURIComponent(String(requestParameters.paymentHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Public Payment Longpolling
     */
    async apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(requestParameters: ApiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Restart Server
     */
    async apiRestartServerAdminApiV1RestartGetRaw(requestParameters: ApiRestartServerAdminApiV1RestartGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiRestartServerAdminApiV1RestartGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/restart/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Restart Server
     */
    async apiRestartServerAdminApiV1RestartGet(requestParameters: ApiRestartServerAdminApiV1RestartGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiRestartServerAdminApiV1RestartGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Uninstall Extension
     */
    async apiUninstallExtensionApiV1ExtensionExtIdDeleteRaw(requestParameters: ApiUninstallExtensionApiV1ExtensionExtIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.extId === null || requestParameters.extId === undefined) {
            throw new runtime.RequiredError('extId','Required parameter requestParameters.extId was null or undefined when calling apiUninstallExtensionApiV1ExtensionExtIdDelete.');
        }

        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiUninstallExtensionApiV1ExtensionExtIdDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/extension/{ext_id}`.replace(`{${"ext_id"}}`, encodeURIComponent(String(requestParameters.extId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Uninstall Extension
     */
    async apiUninstallExtensionApiV1ExtensionExtIdDelete(requestParameters: ApiUninstallExtensionApiV1ExtensionExtIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiUninstallExtensionApiV1ExtensionExtIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Update Settings
     */
    async apiUpdateSettingsAdminApiV1SettingsPutRaw(requestParameters: ApiUpdateSettingsAdminApiV1SettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling apiUpdateSettingsAdminApiV1SettingsPut.');
        }

        if (requestParameters.editableSettings === null || requestParameters.editableSettings === undefined) {
            throw new runtime.RequiredError('editableSettings','Required parameter requestParameters.editableSettings was null or undefined when calling apiUpdateSettingsAdminApiV1SettingsPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/api/v1/settings/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditableSettingsToJSON(requestParameters.editableSettings),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Update Settings
     */
    async apiUpdateSettingsAdminApiV1SettingsPut(requestParameters: ApiUpdateSettingsAdminApiV1SettingsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiUpdateSettingsAdminApiV1SettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Update Wallet
     */
    async apiUpdateWalletApiV1WalletNewNamePutRaw(requestParameters: ApiUpdateWalletApiV1WalletNewNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.newName === null || requestParameters.newName === undefined) {
            throw new runtime.RequiredError('newName','Required parameter requestParameters.newName was null or undefined when calling apiUpdateWalletApiV1WalletNewNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/wallet/{new_name}`.replace(`{${"new_name"}}`, encodeURIComponent(String(requestParameters.newName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Update Wallet
     */
    async apiUpdateWalletApiV1WalletNewNamePut(requestParameters: ApiUpdateWalletApiV1WalletNewNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiUpdateWalletApiV1WalletNewNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Wallet
     */
    async apiWalletApiV1WalletGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/wallet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Wallet
     */
    async apiWalletApiV1WalletGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiWalletApiV1WalletGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * show the current balance of the node and the LNbits database
     * Audit
     */
    async auditAdminApiV1AuditGetRaw(requestParameters: AuditAdminApiV1AuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling auditAdminApiV1AuditGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/api/v1/audit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * show the current balance of the node and the LNbits database
     * Audit
     */
    async auditAdminApiV1AuditGet(requestParameters: AuditAdminApiV1AuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.auditAdminApiV1AuditGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Extension Db
     */
    async deleteExtensionDbApiV1ExtensionExtIdDbDeleteRaw(requestParameters: DeleteExtensionDbApiV1ExtensionExtIdDbDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.extId === null || requestParameters.extId === undefined) {
            throw new runtime.RequiredError('extId','Required parameter requestParameters.extId was null or undefined when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete.');
        }

        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/extension/{ext_id}/db`.replace(`{${"ext_id"}}`, encodeURIComponent(String(requestParameters.extId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Extension Db
     */
    async deleteExtensionDbApiV1ExtensionExtIdDbDelete(requestParameters: DeleteExtensionDbApiV1ExtensionExtIdDbDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteExtensionDbApiV1ExtensionExtIdDbDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Extension Release
     */
    async getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRaw(requestParameters: GetExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.org === null || requestParameters.org === undefined) {
            throw new runtime.RequiredError('org','Required parameter requestParameters.org was null or undefined when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet.');
        }

        if (requestParameters.repo === null || requestParameters.repo === undefined) {
            throw new runtime.RequiredError('repo','Required parameter requestParameters.repo was null or undefined when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet.');
        }

        if (requestParameters.tagName === null || requestParameters.tagName === undefined) {
            throw new runtime.RequiredError('tagName','Required parameter requestParameters.tagName was null or undefined when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet.');
        }

        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/extension/release/{org}/{repo}/{tag_name}`.replace(`{${"org"}}`, encodeURIComponent(String(requestParameters.org))).replace(`{${"repo"}}`, encodeURIComponent(String(requestParameters.repo))).replace(`{${"tag_name"}}`, encodeURIComponent(String(requestParameters.tagName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Extension Release
     */
    async getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(requestParameters: GetExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Extension Releases
     */
    async getExtensionReleasesApiV1ExtensionExtIdReleasesGetRaw(requestParameters: GetExtensionReleasesApiV1ExtensionExtIdReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.extId === null || requestParameters.extId === undefined) {
            throw new runtime.RequiredError('extId','Required parameter requestParameters.extId was null or undefined when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet.');
        }

        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/extension/{ext_id}/releases`.replace(`{${"ext_id"}}`, encodeURIComponent(String(requestParameters.extId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Extension Releases
     */
    async getExtensionReleasesApiV1ExtensionExtIdReleasesGet(requestParameters: GetExtensionReleasesApiV1ExtensionExtIdReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getExtensionReleasesApiV1ExtensionExtIdReleasesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health
     */
    async healthApiV1HealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Health
     */
    async healthApiV1HealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthApiV1HealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Img
     */
    async imgApiV1QrcodeDataGetRaw(requestParameters: ImgApiV1QrcodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling imgApiV1QrcodeDataGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/qrcode/{data}`.replace(`{${"data"}}`, encodeURIComponent(String(requestParameters.data))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Img
     */
    async imgApiV1QrcodeDataGet(requestParameters: ImgApiV1QrcodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imgApiV1QrcodeDataGetRaw(requestParameters, initOverrides);
    }

    /**
     * get list of payments
     */
    async paymentListApiV1PaymentsGetRaw(requestParameters: PaymentListApiV1PaymentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Payment>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sortby !== undefined) {
            queryParameters['sortby'] = requestParameters.sortby;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.checkingId !== undefined) {
            queryParameters['checking_id'] = requestParameters.checkingId;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.fee !== undefined) {
            queryParameters['fee'] = requestParameters.fee;
        }

        if (requestParameters.memo !== undefined) {
            queryParameters['memo'] = requestParameters.memo;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = (requestParameters.time as any).toISOString();
        }

        if (requestParameters.bolt11 !== undefined) {
            queryParameters['bolt11'] = requestParameters.bolt11;
        }

        if (requestParameters.preimage !== undefined) {
            queryParameters['preimage'] = requestParameters.preimage;
        }

        if (requestParameters.paymentHash !== undefined) {
            queryParameters['payment_hash'] = requestParameters.paymentHash;
        }

        if (requestParameters.expiry !== undefined) {
            queryParameters['expiry'] = (requestParameters.expiry as any).toISOString();
        }

        if (requestParameters.extra !== undefined) {
            queryParameters['extra'] = requestParameters.extra;
        }

        if (requestParameters.walletId !== undefined) {
            queryParameters['wallet_id'] = requestParameters.walletId;
        }

        if (requestParameters.webhook !== undefined) {
            queryParameters['webhook'] = requestParameters.webhook;
        }

        if (requestParameters.webhookStatus !== undefined) {
            queryParameters['webhook_status'] = requestParameters.webhookStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentFromJSON));
    }

    /**
     * get list of payments
     */
    async paymentListApiV1PaymentsGet(requestParameters: PaymentListApiV1PaymentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Payment>> {
        const response = await this.paymentListApiV1PaymentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get paginated list of payments
     */
    async paymentListApiV1PaymentsPaginatedGetRaw(requestParameters: PaymentListApiV1PaymentsPaginatedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sortby !== undefined) {
            queryParameters['sortby'] = requestParameters.sortby;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.checkingId !== undefined) {
            queryParameters['checking_id'] = requestParameters.checkingId;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.fee !== undefined) {
            queryParameters['fee'] = requestParameters.fee;
        }

        if (requestParameters.memo !== undefined) {
            queryParameters['memo'] = requestParameters.memo;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = (requestParameters.time as any).toISOString();
        }

        if (requestParameters.bolt11 !== undefined) {
            queryParameters['bolt11'] = requestParameters.bolt11;
        }

        if (requestParameters.preimage !== undefined) {
            queryParameters['preimage'] = requestParameters.preimage;
        }

        if (requestParameters.paymentHash !== undefined) {
            queryParameters['payment_hash'] = requestParameters.paymentHash;
        }

        if (requestParameters.expiry !== undefined) {
            queryParameters['expiry'] = (requestParameters.expiry as any).toISOString();
        }

        if (requestParameters.extra !== undefined) {
            queryParameters['extra'] = requestParameters.extra;
        }

        if (requestParameters.walletId !== undefined) {
            queryParameters['wallet_id'] = requestParameters.walletId;
        }

        if (requestParameters.webhook !== undefined) {
            queryParameters['webhook'] = requestParameters.webhook;
        }

        if (requestParameters.webhookStatus !== undefined) {
            queryParameters['webhook_status'] = requestParameters.webhookStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/payments/paginated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * get paginated list of payments
     */
    async paymentListApiV1PaymentsPaginatedGet(requestParameters: PaymentListApiV1PaymentsPaginatedGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.paymentListApiV1PaymentsPaginatedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a tinyurl
     * Tinyurl
     */
    async tinyurlApiV1TinyurlPostRaw(requestParameters: TinyurlApiV1TinyurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling tinyurlApiV1TinyurlPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.endless !== undefined) {
            queryParameters['endless'] = requestParameters.endless;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/tinyurl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * creates a tinyurl
     * Tinyurl
     */
    async tinyurlApiV1TinyurlPost(requestParameters: TinyurlApiV1TinyurlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.tinyurlApiV1TinyurlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a tinyurl by id
     * Tinyurl
     */
    async tinyurlApiV1TinyurlTinyurlIdDeleteRaw(requestParameters: TinyurlApiV1TinyurlTinyurlIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tinyurlId === null || requestParameters.tinyurlId === undefined) {
            throw new runtime.RequiredError('tinyurlId','Required parameter requestParameters.tinyurlId was null or undefined when calling tinyurlApiV1TinyurlTinyurlIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/tinyurl/{tinyurl_id}`.replace(`{${"tinyurl_id"}}`, encodeURIComponent(String(requestParameters.tinyurlId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * delete a tinyurl by id
     * Tinyurl
     */
    async tinyurlApiV1TinyurlTinyurlIdDelete(requestParameters: TinyurlApiV1TinyurlTinyurlIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.tinyurlApiV1TinyurlTinyurlIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get a tinyurl by id
     * Tinyurl
     */
    async tinyurlApiV1TinyurlTinyurlIdGetRaw(requestParameters: TinyurlApiV1TinyurlTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tinyurlId === null || requestParameters.tinyurlId === undefined) {
            throw new runtime.RequiredError('tinyurlId','Required parameter requestParameters.tinyurlId was null or undefined when calling tinyurlApiV1TinyurlTinyurlIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // APIKeyHeader authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api-key"] = this.configuration.apiKey("api-key"); // APIKeyQuery authentication
        }

        const response = await this.request({
            path: `/api/v1/tinyurl/{tinyurl_id}`.replace(`{${"tinyurl_id"}}`, encodeURIComponent(String(requestParameters.tinyurlId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * get a tinyurl by id
     * Tinyurl
     */
    async tinyurlApiV1TinyurlTinyurlIdGet(requestParameters: TinyurlApiV1TinyurlTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.tinyurlApiV1TinyurlTinyurlIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * redirects a tinyurl by id
     * Tinyurl
     */
    async tinyurlTTinyurlIdGetRaw(requestParameters: TinyurlTTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tinyurlId === null || requestParameters.tinyurlId === undefined) {
            throw new runtime.RequiredError('tinyurlId','Required parameter requestParameters.tinyurlId was null or undefined when calling tinyurlTTinyurlIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/t/{tinyurl_id}`.replace(`{${"tinyurl_id"}}`, encodeURIComponent(String(requestParameters.tinyurlId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * redirects a tinyurl by id
     * Tinyurl
     */
    async tinyurlTTinyurlIdGet(requestParameters: TinyurlTTinyurlIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.tinyurlTTinyurlIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Topup
     */
    async topupAdminApiV1TopupPutRaw(requestParameters: TopupAdminApiV1TopupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.usr === null || requestParameters.usr === undefined) {
            throw new runtime.RequiredError('usr','Required parameter requestParameters.usr was null or undefined when calling topupAdminApiV1TopupPut.');
        }

        if (requestParameters.createTopup === null || requestParameters.createTopup === undefined) {
            throw new runtime.RequiredError('createTopup','Required parameter requestParameters.createTopup was null or undefined when calling topupAdminApiV1TopupPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.usr !== undefined) {
            queryParameters['usr'] = requestParameters.usr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/api/v1/topup/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTopupToJSON(requestParameters.createTopup),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Topup
     */
    async topupAdminApiV1TopupPut(requestParameters: TopupAdminApiV1TopupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.topupAdminApiV1TopupPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Websocket Update Get
     */
    async websocketUpdateGetApiV1WsItemIdDataGetRaw(requestParameters: WebsocketUpdateGetApiV1WsItemIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling websocketUpdateGetApiV1WsItemIdDataGet.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling websocketUpdateGetApiV1WsItemIdDataGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/ws/{item_id}/{data}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"data"}}`, encodeURIComponent(String(requestParameters.data))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Websocket Update Get
     */
    async websocketUpdateGetApiV1WsItemIdDataGet(requestParameters: WebsocketUpdateGetApiV1WsItemIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websocketUpdateGetApiV1WsItemIdDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Websocket Update Post
     */
    async websocketUpdatePostApiV1WsItemIdPostRaw(requestParameters: WebsocketUpdatePostApiV1WsItemIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling websocketUpdatePostApiV1WsItemIdPost.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling websocketUpdatePostApiV1WsItemIdPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.data !== undefined) {
            queryParameters['data'] = requestParameters.data;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/ws/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Websocket Update Post
     */
    async websocketUpdatePostApiV1WsItemIdPost(requestParameters: WebsocketUpdatePostApiV1WsItemIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websocketUpdatePostApiV1WsItemIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PaymentListApiV1PaymentsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type PaymentListApiV1PaymentsGetDirectionEnum = typeof PaymentListApiV1PaymentsGetDirectionEnum[keyof typeof PaymentListApiV1PaymentsGetDirectionEnum];
/**
 * @export
 */
export const PaymentListApiV1PaymentsPaginatedGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type PaymentListApiV1PaymentsPaginatedGetDirectionEnum = typeof PaymentListApiV1PaymentsPaginatedGetDirectionEnum[keyof typeof PaymentListApiV1PaymentsPaginatedGetDirectionEnum];
