/* tslint:disable */
/* eslint-disable */
/**
 * lnbits client
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    checkingId: string;
    /**
     * 
     * @type {boolean}
     * @memberof Payment
     */
    pending: boolean;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    fee: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    memo?: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    time: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    bolt11: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    preimage: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    paymentHash: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    expiry?: number;
    /**
     * 
     * @type {object}
     * @memberof Payment
     */
    extra?: object;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    walletId: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    webhook?: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    webhookStatus?: number;
}

/**
 * Check if a given object implements the Payment interface.
 */
export function instanceOfPayment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "checkingId" in value;
    isInstance = isInstance && "pending" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "bolt11" in value;
    isInstance = isInstance && "preimage" in value;
    isInstance = isInstance && "paymentHash" in value;
    isInstance = isInstance && "walletId" in value;

    return isInstance;
}

export function PaymentFromJSON(json: any): Payment {
    return PaymentFromJSONTyped(json, false);
}

export function PaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Payment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checkingId': json['checking_id'],
        'pending': json['pending'],
        'amount': json['amount'],
        'fee': json['fee'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'time': json['time'],
        'bolt11': json['bolt11'],
        'preimage': json['preimage'],
        'paymentHash': json['payment_hash'],
        'expiry': !exists(json, 'expiry') ? undefined : json['expiry'],
        'extra': !exists(json, 'extra') ? undefined : json['extra'],
        'walletId': json['wallet_id'],
        'webhook': !exists(json, 'webhook') ? undefined : json['webhook'],
        'webhookStatus': !exists(json, 'webhook_status') ? undefined : json['webhook_status'],
    };
}

export function PaymentToJSON(value?: Payment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'checking_id': value.checkingId,
        'pending': value.pending,
        'amount': value.amount,
        'fee': value.fee,
        'memo': value.memo,
        'time': value.time,
        'bolt11': value.bolt11,
        'preimage': value.preimage,
        'payment_hash': value.paymentHash,
        'expiry': value.expiry,
        'extra': value.extra,
        'wallet_id': value.walletId,
        'webhook': value.webhook,
        'webhook_status': value.webhookStatus,
    };
}

